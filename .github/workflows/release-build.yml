name: Build vkQuake with Fixed Port

on:
  push:
    branches:
      - upstream
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build (leave empty for latest)'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: upstream
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          if [ -n "${{ github.event.inputs.tag }}" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            LATEST_TAG=$(git tag --sort=-version:refname | head -n1)
            echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          fi
          echo "Building tag: $LATEST_TAG"

      - name: Set up build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          sudo apt-get install -y libsdl2-dev libvorbis-dev libmpg123-dev libflac-dev libopusfile-dev
          sudo apt-get install -y pkg-config glslang-tools spirv-tools
          sudo apt-get install -y fuse libfuse2 wget
          
          # Install AppImage tools
          wget -O /tmp/appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x /tmp/appimagetool

      - name: Install Vulkan development headers
        run: |
          # Install Vulkan headers and loader from Ubuntu packages instead of Vulkan SDK
          sudo apt-get install -y libvulkan-dev vulkan-utility-libraries-dev
          # Install runtime Vulkan dependencies (needed for vkQuake)
          sudo apt-get install -y libvulkan1 mesa-vulkan-drivers
          # Install additional dependencies for cross-compilation
          sudo apt-get install -y libx11-xcb-dev

      - name: Apply port fix
        run: |
          sed -i 's/address\.sin_port = htons ((unsigned short)port);/if (port == 0) port = 26001;\n\taddress.sin_port = htons ((unsigned short)port);/' Quake/net_udp.c

      - name: Build for AMD64
        if: matrix.arch == 'amd64'
        run: |
          cd Quake
          # vkQuake uses traditional Makefile, not meson
          make -j$(nproc)
          strip vkquake
          
          # Create AppImage structure
          mkdir -p AppDir/usr/bin
          cp vkquake AppDir/usr/bin/
          
          # Create desktop file in root of AppDir (some appimagetool versions expect this)
          cat > AppDir/vkquake.desktop << 'EOF'
          [Desktop Entry]
          Type=Application
          Name=vkQuake
          Exec=vkquake
          Icon=vkquake
          Categories=Game;
          EOF
          
          # Also create it in the standard location
          mkdir -p AppDir/usr/share/applications
          cp AppDir/vkquake.desktop AppDir/usr/share/applications/
          
          # Create icon directory and placeholder icon
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          # Create a simple PNG placeholder (1x1 transparent pixel)
          printf '\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x06\x00\x00\x00\x1f\x15\xc4\x89\x00\x00\x00\rIDATx\x9cc\xf8\x0f\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00IEND\xaeB`\x82' > AppDir/usr/share/icons/hicolor/256x256/apps/vkquake.png
          
          # Create AppRun script
          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          exec "${HERE}/usr/bin/vkquake" "$@"
          EOF
          chmod +x AppDir/AppRun
          
          # Create .DirIcon
          cp AppDir/usr/share/icons/hicolor/256x256/apps/vkquake.png AppDir/.DirIcon
          
          # Verify structure before building AppImage
          echo "=== AppDir structure ==="
          find AppDir -type f -exec ls -la {} \;
          
          # Try with verbose output to see what's happening
          /tmp/appimagetool --verbose AppDir vkquake-${{ steps.get_tag.outputs.tag }}-linux-amd64.AppImage

      - name: Build for ARM64
        if: matrix.arch == 'arm64'
        run: |
          cd Quake
          export CC=aarch64-linux-gnu-gcc
          export CXX=aarch64-linux-gnu-g++
          make -j$(nproc)
          aarch64-linux-gnu-strip vkquake
          tar -czf vkquake-${{ steps.get_tag.outputs.tag }}-linux-arm64.tar.gz vkquake

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: vkQuake ${{ steps.get_tag.outputs.tag }} (Fixed Port)
          body: |
            vkQuake ${{ steps.get_tag.outputs.tag }} with fixed client port 26001
            
            Changes:
            - Client always uses UDP port 26001 instead of random ports
            - Built for Linux AMD64 (AppImage) and ARM64 (tar.gz)
          files: |
            vkquake-${{ steps.get_tag.outputs.tag }}-linux-*.AppImage
            vkquake-${{ steps.get_tag.outputs.tag }}-linux-*.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
