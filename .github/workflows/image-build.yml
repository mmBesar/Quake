name: Build and Publish vkQuake Server Container

on:
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if no changes'
        required: false
        default: false
        type: boolean
      image_tag:
        description: 'Custom image tag (default: auto-generated from git tag)'
        required: false
        default: ''
        type: string
  push:
    branches:
      - upstream
    paths:
      - 'src/**'
      - 'Makefile'
      - 'Dockerfile'
      - 'start.sh'
      - '.github/workflows/image-build.yml'
  schedule:
    # Check for upstream updates every 12 hours
    - cron: '0 */12 * * *'

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      image_tag: ${{ steps.check.outputs.image_tag }}
      git_tag: ${{ steps.check.outputs.git_tag }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for changes or triggers
      id: check
      run: |
        # Get the latest tag from upstream by creation date
        GIT_TAG=$(git tag --sort=-creatordate | head -n1)
        
        # If no tag found, use commit SHA
        if [[ -z "$GIT_TAG" ]]; then
          GIT_TAG="sha-$(git rev-parse --short HEAD)"
        fi
        
        echo "git_tag=$GIT_TAG" >> $GITHUB_OUTPUT
        
        # Determine image tag
        if [[ -n "${{ github.event.inputs.image_tag }}" ]]; then
          IMAGE_TAG="${{ github.event.inputs.image_tag }}"
        else
          IMAGE_TAG="$GIT_TAG"
        fi
        
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        
        # Check if this is a manual trigger
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "Manual trigger detected"
          echo "should_build=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Check if this is a push event
        if [[ "${{ github.event_name }}" == "push" ]]; then
          echo "Push event detected"
          echo "should_build=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # For scheduled runs, check if image already exists
        echo "Checking if image already exists for tag: $IMAGE_TAG"
        
        # Login to registry to check if image exists
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
        
        # Check if image exists
        if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG >/dev/null 2>&1; then
          echo "Image for $IMAGE_TAG already exists"
          echo "should_build=false" >> $GITHUB_OUTPUT
        else
          echo "No image found for $IMAGE_TAG, should build"
          echo "should_build=true" >> $GITHUB_OUTPUT
        fi

  build-and-push:
    needs: check-changes
    if: needs.check-changes.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout main for Dockerfile
      uses: actions/checkout@v4
      with:
        ref: main
        path: main

    - name: Checkout upstream for source
      uses: actions/checkout@v4
      with:
        ref: upstream
        path: upstream

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest
          type=raw,value=${{ needs.check-changes.outputs.image_tag }}
          type=raw,value=${{ needs.check-changes.outputs.git_tag }}
        labels: |
          org.opencontainers.image.title=vkQuake Dedicated Server
          org.opencontainers.image.description=Containerized vkQuake dedicated server with full configuration control
          org.opencontainers.image.vendor=mmBesar
          org.opencontainers.image.licenses=GPL-2.0
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/README.md
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.version=${{ needs.check-changes.outputs.git_tag }}

    - name: Prepare build context
      run: |
        # Copy Dockerfile from main branch
        cp main/Dockerfile .
        # Copy Dockerfile from main branch
        cp main/start.sh .
        # Copy source from upstream
        cp -r upstream/* .
        # Ensure we have the Dockerfile in the build context
        ls -la Dockerfile

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Create GitHub Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.check-changes.outputs.git_tag }}
        release_name: Quake II Server ${{ needs.check-changes.outputs.git_tag }}
        body: |
          ## vkQuake Dedicated Server Container
          
          Multi-architecture container image for vkQuake dedicated server.
          
          ### Usage
          ```bash
          docker pull ghcr.io/mmbesar/quake:latest
          ```
          
          ### Supported Architectures
          - linux/amd64
          - linux/arm64

        draft: false
        prerelease: false

    - name: Image digest
      run: echo "Image built and pushed successfully!"
